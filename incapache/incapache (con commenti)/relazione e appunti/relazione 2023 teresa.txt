PARTECIPANTI
Lorenzo Aliotta (5655762)
Riccardo Dal Seno (5605031)
Teresa de Jesus Fernandes (4190022)


ORGANIZZAZIONE DEL MATERIALE
La cartella presenta i file compilati e, in aggiunta:
- lo script di testing "test.sh"
- la directory "test_output", contentente i file di output relativi alle esecuzioni impartite dallo script test.sh (in particolore: file di output e file di errore)
- il file modificato index.html
- questa relazione
- il form generato dinamicamente "review.html"
Si segnala infatti che è stato modificato il file index.html per rendere accessibile da browser il file review.html 


PROBLEMATICHE PRESENTI NEL CODICE
- Si fa notare che il parsing della data di scadenza del cookie fallisce quando la richiesta arriva tramite browser e non tramite telnet. Infatti quando da browser riceviamo una richiesta di get/head, 
  viene specificato l'UserID del cookie, ma non la sua data di scadenza. 
- nel metodo post, errore persistente e non risolto:
  il client dovrebbe mandare in via esclusiva (header e) payload, proprio come il server invia al client header e payload; tuttavia utilizzando browser 
  (test su Google Chrome e Mozilla Firefox) nell'implementazione proposta non avviene l'invio del payload al server (viene inviato solo l'header).
  All'interno del file test.sh sono specificati un paio di esempi relativi alla funzione POST funzionanti. 
  


DEBUGGING
I casi di debugging vengono esaminati nello script di testing "test.sh". Si annota inoltre che:
- è stato necessario inserire, tra una richiesta e quella successiva, una breve interruzione (mediante funzione SLEEP) 
  per far sì che il server recepisse tutte le richieste inviate all'interno della funzione test_server
- si è inoltre osservato che al superamento di 4 iterazioni nel ciclo for, può accadere che il server riscontri un errore nell'invio del file al client. 
  Più nello specifico, l'errore viene sollevato alla riga 304 della funzione send_file e il valore di errno indica la presenza di una broken pipe.
  Questo errore interrompe conseguentemente l'esecuzione del server e non elabora le richieste successive che il client gli invia.
- Il file test.sh fa il testing di tutte i possibili casi di richiesta, e sotto sono elencate le risposte inviate al client. 
    ************
    HTTP/1.1 200 OK
    ...
    HTTP/1.1 200 OK
    ...
    HTTP/1.1 200 OK
    ...
    HTTP/1.1 404 Not Found
    ...
    HTTP/1.0 501 Method Not Implemented
    ...
    HTTP/1.1 200 OK
    ...
    HTTP/1.1 200 OK
    ...
    HTTP/1.1 200 OK
    ...
    HTTP/1.1 200 OK
    ...
    HTTP/1.1 200 OK
    ...
    HTTP/1.0 400 Bad Request
    ...
    ************
